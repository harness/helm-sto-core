apiVersion: apps/v1
kind: Deployment
metadata:
  name: sto-core 
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "sto-core.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  selector:
    matchLabels:
      {{- include "sto-core.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "sto-core.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "sto-core.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: check-for-postgres
          image: {{ .Values.initContainers.check.image.repository}}:{{.Values.initContainers.check.image.tag}}
          command: ["sh","-c"]
          args: ['while ! nc -z postgres:5432 2>/dev/null; do let elapsed=elapsed+1; if [ "$elapsed" -gt 90 ]; then echo "waiting"; exit 1; fi; sleep 1; done; echo "postgres is ready" ']
      containers:
        - name: sto-core
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env: 
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres
                key: postgres-password
          - name: APP_DATABASE_DATASOURCE
            value: "postgres://postgres:$(DB_PASSWORD)@postgres:5432"
          - name: APP_DB_MIGRATION_DATASOURCE
            value: "postgres://postgres:$(DB_PASSWORD)@postgres:5432" 
          envFrom:
          - configMapRef:
              name: sto-core
          ports:
            - name: http
              containerPort: {{.Values.service.port}}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/v2/system/health
              port: http
            initialDelaySeconds: 3
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/v2/system/health
              port: http
            initialDelaySeconds: 3
            periodSeconds: 30
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - sto-core
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

